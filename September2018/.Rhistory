autoplot(par.gender, rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "InternetServiceNo", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, center = TRUE, n.trees = 1000,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, n.trees = 1000,
plot = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, center = TRUE, train = smote.X.train)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
par.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.stream, ncol=1)
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train)
autoplot(par.stream2, train = smote.X.train)
partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1) %>%
autoplot(train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, chull = TRUE)
partial(xgb.fit, pred.var = "NofInsuranceServices",
plot = TRUE, rug = TRUE)
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, rug = TRUE, train = smote.X.train)
ggplot(info2, aes(NofInsuranceServices, fill = Churn)) + geom_bar()
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, center = TRUE,
rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, ice = TRUE, center = TRUE,
rug = TRUE, train = smote.X.train)
cbind(insurance_churn, ratio = insurance_churn[,1]/insurance_churn[,2], yardstick=churn_ratio)
partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete()
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete("Churn N/Y")
par.stream2
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete("Churn N/Y", labels = c(1,0))
par.stream2
xgb.plot.importance(importance_matrix = import_mat)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train), ncol = 1)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, rug = TRUE)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1), ncol = 1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges",
rug = TRUE, alpha = 0.1, train = smote.X.train), ncol = 1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges",
rug = TRUE, alpha = 0.1, train = smote.X.train) %>% autoplot(train = smote.X.train), ncol = 1)
ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train) %>% autoplot(train = smote.X.train)
# ggplot(churn) + geom_bar(aes(gender, fill = Churn))
# ggplot(churn) + geom_bar(aes(SeniorCitizen, fill = Churn))
# ggplot(churn) + geom_bar(aes(Partner, fill = Churn))
# ggplot(churn) + geom_bar(aes(Dependents, fill = Churn))
# ggplot(churn) + geom_histogram(aes(tenure, fill = Churn))
# ggplot(churn) + geom_bar(aes(PhoneService, fill = Churn))
# ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
# ggplot(churn) + geom_histogram(aes(TotalCharges, fill = Churn))
ggplot(churn) + geom_bar(aes(Churn, fill = Churn)) # about twice
grid.arrange(par.monthcharge , ncol = 1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, train = smote.X.train) %>%
autoplot(center = TRUE, rug = TRUE,alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge , ncol = 1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge ICE") + xlab("Monthly Charges") + ylab("")
par.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services ICE") + xlab("# of stream") + ylab("")
par.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services ICE") + xlab("# of insure") + ylab("")
par.tenure <- partial(xgb.fit, pred.var = "tenure", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure ICE") + xlab("Tenure") + ylab("")
grid.arrange(par.monthcharge, par.tenure, par.stream, par.insure, ncol = 2)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"),
plot = TRUE, rug = TRUE, chull = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"),
train = smote.X.train) %>%
autoplot(rug = TRUE, chull = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train[1:100,])
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train[1:1000,])
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), chull = TRUE,
train = smote.X.train)
nrow(smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = subset(smote.X.train))
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = subset(smote, select = -Churn))
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices", "NofStreamingServices"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices", "NofStreamingServices"), plot = TRUE,
train = smote.X.train)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("")
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("")
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("")
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("")
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
?grid.arrange
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2, widths = 3)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2, widths = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4, color = 1)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4, color = 1)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE,train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 4, color = 2)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 4, color = 3)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 4, color = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 2, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 4)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 3, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 4)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 4, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "black", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 3)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "skyblue", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 3)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "orange", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 3)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "green", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 3)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
ggplot(info2, aes(NofStreamingServices, fill = Churn)) + geom_bar()
ggplot(info2, aes(NofInsuranceServices, fill = Churn)) + geom_bar()
ggplot(info2, aes(NofStreamingServices, fill = Churn)) + geom_bar()
# ggplot(churn) + geom_bar(aes(gender, fill = Churn))
# ggplot(churn) + geom_bar(aes(SeniorCitizen, fill = Churn))
# ggplot(churn) + geom_bar(aes(Partner, fill = Churn))
# ggplot(churn) + geom_bar(aes(Dependents, fill = Churn))
# ggplot(churn) + geom_histogram(aes(tenure, fill = Churn))
# ggplot(churn) + geom_bar(aes(PhoneService, fill = Churn))
# ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
# ggplot(churn) + geom_histogram(aes(TotalCharges, fill = Churn))
ggplot(churn) + geom_bar(aes(Churn, fill = Churn)) # about twice
ggplot(smote, aes(Churn, fill = Churn)) + geom_bar()
xgb.plot.importance(importance_matrix = import_mat)
line(h=3)
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
pred_prob = xgb.pred
y = y.test
model_name = "GB"
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
AUC
ROC
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
title
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
plot(ROC@x.values, ROC@y.values)
ROC@x.values
df = data.frame(tpr = ROC@x.values, fpr = ROC@y.values)
ggplot(df, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
head(df)
ROC@alpha.values
ROC@alpha.values[[1]]
ROC@alpha.values[[2]]
tail(ROC@alpha.values[[1]])
tail(ROC@x.values[[1]])
tail(ROC@y.values[[1]])
df = data.frame(tpr = ROC@x.values[[1]], fpr = ROC@y.values[[1]])
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(color = "blue", size = 2)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 2), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 2)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 1.5), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 0.5), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 0.5, color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(c(0,1)) + ylim(c(0,1))
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
?xlim
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1) + ylim(0,1)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1.01) + ylim(0,1.01)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(-0.1, 1.01) + ylim(-0.1, 1.01)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(-0.5, 1.5) + ylim(-0.5, 1.5)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1) + ylim(0,1) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2) +
ggtitle(title) + xlim(0,1) + ylim(0,1)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2) +
ggtitle(title) + coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot(xgb.pred, y.test, "Gradient Boosting")
###### Two variables ######
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE,
train = smote.X.train)
cfm(xgb.table)
cfm <- function(t) {
acc = t[1,1]+t[2,2]/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm(xgb.table)
cfm <- function(t) {
acc = (t[1,1]+t[2,2])/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm <- function(t) {
acc = (t[1,1]+t[2,2])/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm(xgb.table)
library(Rtsne)
install.packages("Rtsne")
library(Rtsne)
fiv <- fread("world-happiness-report/2015.csv")
six <- fread("world-happiness-report/2016.csv")
sev <- fread("world-happiness-report/2017.csv")
newcolnames <- c("Country", "Region", "Happy_Rank", "Happy_Score",
"Economy", "Family", "Health", "Freedom", "Trust", "Generosity", "Dystopia_Residual")
newcolnames2 <- c("Country", "Happy_Rank", "Happy_Score",
"Economy", "Family", "Health", "Freedom", "Generosity", "Trust", "Dystopia_Residual")
fifth <- fiv
sixth <- six %>%
select(-c(5, 6))
seventh <- sev %>%
select(-c(4, 5))
names(fifth) <- newcolnames
names(sixth) <- newcolnames
names(seventh) <- newcolnames2
country_region1 <- fifth %>%
select(Country, Region)
country_region2 <- sixth %>%
select(Country, Region)
cr_union <- union(country_region1, country_region2)
tempSeven <- left_join(seventh, cr_union)
tempSeven[is.na(tempSeven$Region),] # to find which country has different name like Hong Kong S.A.R., China
seventh2 <- tempSeven %>%
select(1, 11, 2:7, 9, 8, 10) # change order of columns
happy_data <- bind_rows(fifth, sixth, seventh2) # bind three dfs at once
nrow(happy_data)
happy_data <- happy_data[,-c("Happy_Rank", "Happy_Score")]
country_scores <- happy_data %>%
group_by(Country, Region) %>%
summarise_all(mean)
country_name <- country_scores$Country
country_scores$Region <- as.factor(country_scores$Region)
country_region <- country_scores$Region
country_score <- as.data.frame(country_scores) %>%
select(-Country, -Region)
# Gaussian Mixture Model
gmm <- mvnormalmixEM(country_score, k = 5, epsilon = 1e-04)
gmmcluster <- apply(gmm$posterior, 1, function(row) which.max(row))
kms <- kmeans(country_score, 5)
kmscluster <- kms$cluster
country.d <- dist(country_score)
fit <- cmdscale(country.d, eig=TRUE, k=2, add=F)
x <- fit$points[,1]
y <- fit$points[,2]
ggplot(bind_cols(x=x,y=y,name=country_name, clust=as.factor(gmmcluster)), aes(x, y)) +
geom_text_repel(aes(label = name, color = clust), fontface = "bold") +
stat_ellipse(aes(x=x, y=y, fill = clust), alpha=.1,type='norm',geom="polygon") +
ggtitle("Gaussian Mixture Cluster by happy_index") + xlab("") + ylab("")
ggplot(bind_cols(x=x,y=y,name=country_name, clust=as.factor(kmscluster)), aes(x, y)) +
geom_text_repel(aes(label = name, color = clust), fontface = "bold") +
stat_ellipse(aes(x=x, y=y, fill = clust), alpha=.1,type='norm', geom="polygon") +
ggtitle("K-means by happy_index") + xlab("") + ylab("")
source('~/GitHub/Monthly-Data-Analysis/August2018/Happy_map.R', echo=TRUE)
source('~/GitHub/Monthly-Data-Analysis/August2018/Happy_map.R', echo=TRUE)
install.packages("mixtools")
source('~/GitHub/Monthly-Data-Analysis/August2018/Happy_map.R', echo=TRUE)
