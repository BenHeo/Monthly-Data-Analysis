val.err = c()
candidates = seq(from = 100, to = 500, by = 20)
for (i in candidates){
xgb.fit <- xgboost(smote.X.train, smote.y.train, max.depth = 2, shrinkage = 0.01,
nrounds = i, eta = 0.1, objective = "binary:logistic", verbose = 1)
xgb.pred <- predict(xgb.fit, X.test, type = "prob")
val.err = c(val.err, mean(y.test != round(xgb.pred)))
}
val.err
which.min(val.err)
xgb.fit = xgboost(data = smote.X.train, label = smote.y.train, max.depth = 2,
eta = 0.1, nround = candidates[which.min(val.err)], objective = "binary:logistic", verbose = 0)
xgb.pred <- predict(xgb.fit, X.test)
import_mat = xgb.importance(colnames(smote.X.train), model = xgb.fit)
print(import_mat)
xgb.plot.importance(importance_matrix = import_mat)
roc.plot(xgb.pred, y.test, "Gradient Boosting")
xgb.fit = xgboost(data = smote.X.train, label = smote.y.train, max.depth = 2, shrinkage = 0.01
eta = 0.1, nround = candidates[which.min(val.err)], objective = "binary:logistic", verbose = 0)
xgb.fit = xgboost(data = smote.X.train, label = smote.y.train, max.depth = 2, shrinkage = 0.01,
eta = 0.1, nround = candidates[which.min(val.err)], objective = "binary:logistic", verbose = 0)
xgb.pred <- predict(xgb.fit, X.test)
roc.plot(xgb.pred, y.test, "Gradient Boosting")
val.err = c()
candidates = seq(from = 100, to = 500, by = 20)
for (i in candidates){
xgb.fit <- xgboost(smote.X.train, smote.y.train, max.depth = 2, shrinkage = 0.05,
nrounds = i, eta = 0.1, objective = "binary:logistic", verbose = 1)
xgb.pred <- predict(xgb.fit, X.test, type = "prob")
val.err = c(val.err, mean(y.test != round(xgb.pred)))
}
val.err
which.min(val.err)
xgb.fit = xgboost(data = smote.X.train, label = smote.y.train, max.depth = 2, shrinkage = 0.05,
eta = 0.1, nround = candidates[which.min(val.err)], objective = "binary:logistic", verbose = 0)
xgb.pred <- predict(xgb.fit, X.test)
import_mat = xgb.importance(colnames(smote.X.train), model = xgb.fit)
print(import_mat)
library(Ckmeans.1d.dp)
xgb.plot.importance(importance_matrix = import_mat)
library(ROCR)
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
plot(ROC , main = paste(model_name,"\n AUC:",
round(as.numeric(AUC@y.values),4)),
col = "blue", lwd = 2.5)
abline(c(0,0), c(1,1), lty = 2, lwd = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
par.gender <- partial(xgb.fit, pred.var = "genderMale", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = X.train)
library(pdp)
par.gender <- partial(xgb.fit, pred.var = "genderMale", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
par.gender <- partial(xgb.fit, pred.var = "InternetServiceNo", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
autoplot(par.gender, train = smote.X.train)
autoplot(par.gender, rug = TRUE train = smote.X.train)
autoplot(par.gender, rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "InternetServiceNo", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, center = TRUE, n.trees = 1000,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train)
xgb.fit %>%
partial(pred.var = "InternetServiceNo", ice = TRUE, n.trees = 1000,
plot = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(rug = TRUE, center = TRUE, train = smote.X.train)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
par.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.stream, ncol=1)
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train)
autoplot(par.stream2, train = smote.X.train)
partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = FALSE, rug = TRUE, alpha = 0.1) %>%
autoplot(train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1)
partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE,
plot = TRUE, rug = TRUE, alpha = 0.1, chull = TRUE)
partial(xgb.fit, pred.var = "NofInsuranceServices",
plot = TRUE, rug = TRUE)
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, rug = TRUE, train = smote.X.train)
ggplot(info2, aes(NofInsuranceServices, fill = Churn)) + geom_bar()
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, center = TRUE,
rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "NofInsuranceServices", plot = TRUE, ice = TRUE, center = TRUE,
rug = TRUE, train = smote.X.train)
cbind(insurance_churn, ratio = insurance_churn[,1]/insurance_churn[,2], yardstick=churn_ratio)
partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete()
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete("Churn N/Y")
par.stream2
par.stream2 <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = FALSE,
plot = FALSE, rug = TRUE, alpha = 0.1, train = smote.X.train) %>%
autoplot(train = smote.X.train) + scale_y_discrete("Churn N/Y", labels = c(1,0))
par.stream2
xgb.plot.importance(importance_matrix = import_mat)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, rug = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge, ncol=1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train), ncol = 1)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, rug = TRUE)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1), ncol = 1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges",
rug = TRUE, alpha = 0.1, train = smote.X.train), ncol = 1)
grid.arrange(partial(xgb.fit, pred.var = "MonthlyCharges",
rug = TRUE, alpha = 0.1, train = smote.X.train) %>% autoplot(train = smote.X.train), ncol = 1)
ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
rug = TRUE, alpha = 0.1, train = smote.X.train) %>% autoplot(train = smote.X.train)
# ggplot(churn) + geom_bar(aes(gender, fill = Churn))
# ggplot(churn) + geom_bar(aes(SeniorCitizen, fill = Churn))
# ggplot(churn) + geom_bar(aes(Partner, fill = Churn))
# ggplot(churn) + geom_bar(aes(Dependents, fill = Churn))
# ggplot(churn) + geom_histogram(aes(tenure, fill = Churn))
# ggplot(churn) + geom_bar(aes(PhoneService, fill = Churn))
# ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
# ggplot(churn) + geom_histogram(aes(TotalCharges, fill = Churn))
ggplot(churn) + geom_bar(aes(Churn, fill = Churn)) # about twice
grid.arrange(par.monthcharge , ncol = 1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, train = smote.X.train) %>%
autoplot(center = TRUE, rug = TRUE,alpha = 0.1, train = smote.X.train)
grid.arrange(par.monthcharge , ncol = 1)
par.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge ICE") + xlab("Monthly Charges") + ylab("")
par.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services ICE") + xlab("# of stream") + ylab("")
par.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services ICE") + xlab("# of insure") + ylab("")
par.tenure <- partial(xgb.fit, pred.var = "tenure", ice = TRUE, center = TRUE,
train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure ICE") + xlab("Tenure") + ylab("")
grid.arrange(par.monthcharge, par.tenure, par.stream, par.insure, ncol = 2)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"),
plot = TRUE, rug = TRUE, chull = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"),
train = smote.X.train) %>%
autoplot(rug = TRUE, chull = TRUE, train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train[1:100,])
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train[1:1000,])
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), chull = TRUE,
train = smote.X.train)
nrow(smote.X.train)
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = subset(smote.X.train))
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = subset(smote, select = -Churn))
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices", "NofStreamingServices"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices"), plot = TRUE, chull = TRUE,
train = smote.X.train)
partial(xgb.fit, pred.var = c("NofInsuranceServices", "NofStreamingServices"), plot = TRUE,
train = smote.X.train)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("")
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("")
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("")
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("")
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
?grid.arrange
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2, widths = 3)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2, widths = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, alpha = 0.1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4, color = 1)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4, color = 1)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE,train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 4, color = 2)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 4, color = 3)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 4, color = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
####### PDP ######
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 1, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 4)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 2, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 4)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 3, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 4)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, color = 4, train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 4)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
pdp.monthcharge <- partial(xgb.fit, pred.var = "MonthlyCharges", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "black", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Monthly Charge PDP") + xlab("Monthly Charges") + ylab("") + aes(size = 3)
pdp.stream <- partial(xgb.fit, pred.var = "NofStreamingServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "skyblue", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of streaming services PDP") + xlab("# of stream") + ylab("") + aes(size = 3)
pdp.insure <- partial(xgb.fit, pred.var = "NofInsuranceServices", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "orange", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("# of insurance services PDP") + xlab("# of insure") + ylab("") + aes(size = 3)
pdp.tenure <- partial(xgb.fit, pred.var = "tenure", train = smote.X.train) %>%
autoplot(rug = TRUE, color = "green", train = smote.X.train) + scale_y_discrete("Churn N/Y") +
ggtitle("Tenure PDP") + xlab("Tenure") + ylab("") + aes(size = 3)
grid.arrange(pdp.monthcharge, pdp.tenure, pdp.stream, pdp.insure, ncol = 2)
ggplot(info2, aes(NofStreamingServices, fill = Churn)) + geom_bar()
ggplot(info2, aes(NofInsuranceServices, fill = Churn)) + geom_bar()
ggplot(info2, aes(NofStreamingServices, fill = Churn)) + geom_bar()
# ggplot(churn) + geom_bar(aes(gender, fill = Churn))
# ggplot(churn) + geom_bar(aes(SeniorCitizen, fill = Churn))
# ggplot(churn) + geom_bar(aes(Partner, fill = Churn))
# ggplot(churn) + geom_bar(aes(Dependents, fill = Churn))
# ggplot(churn) + geom_histogram(aes(tenure, fill = Churn))
# ggplot(churn) + geom_bar(aes(PhoneService, fill = Churn))
# ggplot(churn) + geom_histogram(aes(MonthlyCharges, fill = Churn))
# ggplot(churn) + geom_histogram(aes(TotalCharges, fill = Churn))
ggplot(churn) + geom_bar(aes(Churn, fill = Churn)) # about twice
ggplot(smote, aes(Churn, fill = Churn)) + geom_bar()
xgb.plot.importance(importance_matrix = import_mat)
line(h=3)
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
pred_prob = xgb.pred
y = y.test
model_name = "GB"
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
AUC
ROC
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
title
ggplot(ROC, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
plot(ROC@x.values, ROC@y.values)
ROC@x.values
df = data.frame(tpr = ROC@x.values, fpr = ROC@y.values)
ggplot(df, aes(fpr, tpr)) geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
head(df)
ROC@alpha.values
ROC@alpha.values[[1]]
ROC@alpha.values[[2]]
tail(ROC@alpha.values[[1]])
tail(ROC@x.values[[1]])
tail(ROC@y.values[[1]])
df = data.frame(tpr = ROC@x.values[[1]], fpr = ROC@y.values[[1]])
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(col = "blue", size = 2.5)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(color = "blue", size = 2)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 2), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 2)) +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 1.5), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(aes(size = 0.5), color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 0.5, color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(c(0,1)) + ylim(c(0,1))
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
?xlim
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1) + ylim(0,1)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1.01) + ylim(0,1.01)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(-0.1, 1.01) + ylim(-0.1, 1.01)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(-0.5, 1.5) + ylim(-0.5, 1.5)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title)
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
ggtitle(title) + xlim(0,1) + ylim(0,1) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2) +
ggtitle(title) + xlim(0,1) + ylim(0,1)
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot = function(pred_prob, y, model_name = NULL){
AUC = performance(prediction(pred_prob , y) , "auc")
ROC = performance(prediction(pred_prob ,y) , "tpr","fpr")
df = data.frame(tpr = ROC@y.values[[1]], fpr = ROC@x.values[[1]])
title = paste(model_name,"\n AUC:", round(as.numeric(AUC@y.values),4))
ggplot(df, aes(fpr, tpr)) + geom_line(size = 2.5, color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dotted", size = 2) +
ggtitle(title) + coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
}
roc.plot(xgb.pred, y.test, "Gradient Boosting")
roc.plot(xgb.pred, y.test, "Gradient Boosting")
###### Two variables ######
partial(xgb.fit, pred.var = c("tenure", "TotalCharges"), plot = TRUE,
train = smote.X.train)
cfm(xgb.table)
cfm <- function(t) {
acc = t[1,1]+t[2,2]/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm(xgb.table)
cfm <- function(t) {
acc = (t[1,1]+t[2,2])/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm <- function(t) {
acc = (t[1,1]+t[2,2])/(sum(t))
prec = t[1,1]/(t[1,1]+t[2,1])
rec = t[1,1]/(t[1,1]+t[1,2])
f1 = 2*prec*rec/(prec+rec)
ans = list(accuracy = acc, precision = prec, recall = rec, f1_score = f1)
ans
}
cfm(xgb.table)
