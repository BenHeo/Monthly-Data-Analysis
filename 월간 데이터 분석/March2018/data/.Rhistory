xy <- data.frame('x'=x1, 'y'=y1)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3,0,0.8)*max(x1)
yc <- rnorm(3,0,0.8)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
# color them by closer centroid
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
xyc
ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3)
}
ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3)
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
xyc
ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3)
}
ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3)
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, 3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 6, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3,0,0.8)*max(x1)
yc <- rnorm(3,0,0.8)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
# color them by closer centroid
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(1)
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, 3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 6, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3,0,0.8)*max(x1)
yc <- rnorm(3,0,0.8)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
# color them by closer centroid
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(3)
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, 3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 6, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1, 'centroid'=0)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3)*max(x1)
yc <- rnorm(3)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
xy
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
#cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(3)
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, 3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 6, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1, 'centroid'=0)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3)*max(x1)
yc <- rnorm(3)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
#cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(3)
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, 3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 6, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1, 'centroid'=0)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3)*max(x1)
yc <- rnorm(3)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
# color them by closer centroid
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(3)
}
x1 <- rnorm(50, -1, 2)
x1 <- c(x1,rnorm(50, -3, 2))
x1 <- c(x1,rnorm(50, 0, 2))
y1 <- rnorm(50, 0, 2)
y1 <- c(y1,rnorm(50, 4, 2))
y1 <- c(y1,rnorm(50, -2, 5))
xy <- data.frame('x'=x1, 'y'=y1, 'centroid'=0)
ggplot(xy, aes(x=x, y=y))+geom_point()
xc <- rnorm(3)*max(x1)
yc <- rnorm(3)*max(y1)
xyc <- data.frame(xc,yc);xyc
ggplot(xy, aes(x=x, y=y))+geom_point()+geom_point(data=xyc, aes(x=xc,y=yc), color="red")
# color them by closer centroid
dist <- function(a,b){
d <- sqrt((a[,1]-b[,1])^2 + (a[,2]-b[,2])^2)
return (d)
}
for (k in 1:10){
for (i in 1:nrow(xy)){
distanc <- Inf
closest <- 2
for (j in 1:nrow(xyc)){
fordist <- dist(xy[i,],xyc[j,])
if (fordist < distanc){
distanc <- fordist
closest <- j
}
}
xy[i,'centroid'] <- closest
}
cencol <- ifelse(xy[,'centroid']==1, "black", ifelse(xy[,'centroid']==2, "pink", "forestgreen"))
mean_step <- xy %>% group_by(centroid) %>% summarise_all(mean)
xyc <- as.data.frame(mean_step[-1])
colnames(xyc) <- c('xc','yc')
print(xyc)
print(ggplot(xy, aes(x=x, y=y, color=cencol))+geom_point()+
geom_point(data=xyc, aes(x=xc,y=yc), color="black", size = 5, shape = 3))
Sys.sleep(3)
}
# load basic infos & train data
activelabel <- read_table('./activity_labels.txt', col_names = FALSE)
features <- read_table('./features.txt', col_names = FALSE)
sub_train <- read_table('./train/subject_train.txt', col_names = FALSE)
x_train <- read_table('./train/x_train.txt', col_names = FALSE)
y_train <- read_table('./train/y_train.txt', col_names = FALSE)
?read_table
??read.table
library(tidyverse)
# load basic infos & train data
activelabel <- read_table('./activity_labels.txt', col_names = FALSE)
features <- read_table('./features.txt', col_names = FALSE)
sub_train <- read_table('./train/subject_train.txt', col_names = FALSE)
x_train <- read_table('./train/x_train.txt', col_names = FALSE)
y_train <- read_table('./train/y_train.txt', col_names = FALSE)
features <- separate(features, X1, c('featureNum', 'featmeasure'), ' ')
a <- list('one' = c(1,11,111), 'two' = c(2,22,22))
a
a$one
a[["one"]]
a["one"]
sum(a["one"])
sum(a[["one"]])
library(tidyverse)
library(lubridate)
library(data.table)
setwd('C:/Users/asd/Desktop/데이터 사이언스/월간 데이터 분석/3월호/data')
# read files
df <- fread('2017년_1_9월_일별_역별_시간대별_승하차인원_1_8호선_.csv')
setwd('C:/Users/asd/Desktop/데이터 사이언스/Monthly Data Analysis/월간 데이터 분석/March2018/data')
getwd()
df <- fread('2017년_1_9월_일별_역별_시간대별_승하차인원_1_8호선_.csv')
dfcolname <- c('date','month', 'stationN', 'stationK','i/o',
'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'forteen',
'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninteen', 'twenty', 'twentyone',
'twentytwo', 'twentythree', 'after24')  #change colnames and time range is 4-5 ~ 23-24
head(df)
ncol(df)
colnames(df) <- dfcolname
df <- df %>% mutate(stationN = ifelse(stationN >= 1000, (stationN%%1000), (stationN%/%1))) #%>% select(stationN)
df <- df %>% mutate(lane = (stationN%/%100)) # station numbers' fore numbers are lane number
df <- df[,c(1,26,3:25)]
head(df)
tempdf <- df
tempdf <- tempdf %>% separate(stationK, c('stationK', 'stnumbs'))
head(tempdf)
df <- tempdf[-5]
df <- tempdf[-5] # stnumbs are reduplication of statioN
library(tidyverse)
library(lubridate)
library(data.table)
setwd('C:/Users/asd/Desktop/데이터 사이언스/Monthly Data Analysis/월간 데이터 분석/March2018/data')
# read files
df <- fread('2017년_1_9월_일별_역별_시간대별_승하차인원_1_8호선_.csv')
dfcolname <- c('date','month', 'stationN', 'stationK','i/o',
'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'forteen',
'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninteen', 'twenty', 'twentyone',
'twentytwo', 'twentythree', 'after24')  #change colnames and time range is 4-5 ~ 23-24
colnames(df) <- dfcolname
# station number were written ununiformly, if real number is 327, some of them were 1327. So, delete thousands
df <- df %>% mutate(stationN = ifelse(stationN >= 1000, (stationN%%1000), (stationN%/%1))) #%>% select(stationN)
df <- df %>% mutate(lane = (stationN%/%100)) # station numbers' fore numbers are lane number
df <- df[,c(1,26,3:25)]
# extract station number part
# it was like this: 서울역(150) and I want to change it like this: 서울역, because station number is already in stationN col
tempdf <- df
tempdf <- tempdf %>% separate(stationK, c('stationK', 'stnumbs'))
head(tempdf)
df <- tempdf[-5] # stnumbs are reduplication of statioN
# this data is only from 2017, so doesn't need year part, and dividing month and day column is good for analysis
df$date <- ymd(df$date)
df <- df %>% mutate('weekday' = lubridate::wday(df$date, label = TRUE, abbr = FALSE, week_start = 1)) # insert weekday
df$date <- format(df$date, format = '%m-%d')
df <- df %>% separate(date,c('month','day'))
summary(df) # knew that number of people were written in char and some of them have ',', e.g. 1,329
timedf <- df[,7:26]
timezone <- c(1:20)
timedf[,timezone] <- gsub(',', '',as.matrix(timedf[,timezone]))
timedf[,timezone] <- gsub(',', '',as.matrix(timedf[,timezone]))
timedf[,timezone] <- gsub('\n','',as.matrix(timedf[,timezone]))
timedf[,timezone] <- sapply(timedf[,timezone], as.numeric)
summary(timedf) # confirm it changed as wanted
df[,7:26] <- timedf[,timezone]
for (i in 1:3){ # month, day, lane, station number are better if it is factor type
df[,i] <- as.factor(df[,i])
}
df <- df %>% mutate(weekend = ifelse(weekday == '토요일'|weekday == '일요일', 1, 0))
df <- df[,c(1:5,27,28,6:26)]
odd_row <- seq(1,150154,2)
even_row <- seq(2, 150154, 2)
ndf <- df[1:(nrow(df)/2), -8]
if (all.equal(df$stationN[odd_row], df$stationN[even_row])){
ndf[,1:7] <- df[odd_row, 1:7]
ndf[, 8:27] <- df[odd_row, 9:28] - df[even_row, 9:28]
} else stop("Crucial Error!")
df <- ndf
df$weekend <- as.factor(df$weekend)
library(tidyverse)
library(lubridate)
library(data.table)
setwd('C:/Users/asd/Desktop/데이터 사이언스/Monthly Data Analysis/월간 데이터 분석/March2018/data')
# read files
df <- fread('cleansedDf.csv', header = TRUE)
head(df)
weekdayat6 <- df %>% filter(weekend == 0) %>% select(stationK, six) %>%
group_by(stationK) %>% summarise(avg=mean(six)) %>%
arrange(desc(avg)) %>% mutate(rank = dense_rank(desc(avg))) %>% top_n(40,avg)
ggplot(weekdayat6, aes(x=reorder(stationK,-avg), y=avg, fill=avg)) +
geom_bar(stat="identity", position="dodge")+ scale_fill_gradient(low = 'skyblue', high = 'green') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = mean(weekdayat6$avg), lty = 2) +
geom_hline(yintercept = quantile(weekdayat6$avg, 0.75), lty = 2, color = 'red')+
geom_hline(yintercept = quantile(weekdayat6$avg, 0.25), lty = 2, color = 'blue')+
geom_hline(yintercept = quantile(weekdayat6$avg, 0.9), lty = 1, color = 'deeppink')
# 주중 전체 역 중 6시에 (타는 사람-내리는 사람)이 많은 top40
weekdayat6 <- df %>% filter(weekend == 0) %>% select(stationK, six) %>%
group_by(stationK) %>% summarise(avg=mean(six)) %>%
arrange(desc(avg)) %>% mutate(rank = dense_rank(desc(avg))) %>% top_n(40,avg)
ggplot(weekdayat6, aes(x=reorder(stationK,-avg), y=avg, fill=avg)) +
geom_bar(stat="identity", position="dodge")+ scale_fill_gradient(low = 'skyblue', high = 'green') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = mean(weekdayat6$avg), lty = 2) +
geom_hline(yintercept = quantile(weekdayat6$avg, 0.75), lty = 2, color = 'red')+
geom_hline(yintercept = quantile(weekdayat6$avg, 0.25), lty = 2, color = 'blue')+
geom_hline(yintercept = quantile(weekdayat6$avg, 0.9), lty = 1, color = 'deeppink')
# 주말 전체 역 중 6시에 (타는 사람-내리는 사람)이 많은 top40
weekendat6 <- df %>% filter(weekend == 1) %>% select(stationK, six) %>%
group_by(stationK) %>% summarise(avg=mean(six)) %>%
arrange(desc(avg)) %>% mutate(rank = dense_rank(desc(avg))) %>% top_n(40,avg)
ggplot(weekendat6, aes(x=reorder(stationK,-avg), y=avg, fill=avg)) +
geom_bar(stat="identity", position="dodge")+ scale_fill_gradient(low = 'skyblue', high = 'green') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = mean(weekendat6$avg), lty = 2) +
geom_hline(yintercept = quantile(weekendat6$avg, 0.75), lty = 2, color = 'red')+
geom_hline(yintercept = quantile(weekendat6$avg, 0.25), lty = 2, color = 'blue')+
geom_hline(yintercept = quantile(weekendat6$avg, 0.9), lty = 1, color = 'deeppink')
# 주중 전체 역 중 7시에 (타는 사람-내리는 사람)이 많은 top40
weekdayat7 <- df %>% filter(weekend == 0) %>% select(stationK, seven) %>%
group_by(stationK) %>% summarise(avg = mean(seven)) %>%
arrange(desc(avg)) %>% mutate(rank = dense_rank(desc(avg))) %>% top_n(40,avg)
ggplot(weekdayat7, aes(x=reorder(stationK,-avg), y=avg, fill=avg)) +
geom_bar(stat="identity", position="dodge")+ scale_fill_gradient(low = 'skyblue', high = 'green') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = mean(weekdayat7$avg), lty = 2) +
geom_hline(yintercept = quantile(weekdayat7$avg, 0.75), lty = 2, color = 'red')+
geom_hline(yintercept = quantile(weekdayat7$avg, 0.25), lty = 2, color = 'blue')+
geom_hline(yintercept = quantile(weekdayat7$avg, 0.9), lty = 1, color = 'deeppink')
# 주말 전체 역 중 7시에 (타는 사람-내리는 사람)이 많은 top40
weekendat7 <- df %>% filter(weekend == 0) %>% select(stationK, seven) %>%
group_by(stationK) %>% summarise(avg = mean(seven)) %>%
arrange(desc(avg)) %>% mutate(rank = dense_rank(desc(avg))) %>% top_n(40,avg)
ggplot(weekendat7, aes(x=reorder(stationK,-avg), y=avg, fill=avg)) +
geom_bar(stat="identity", position="dodge")+ scale_fill_gradient(low = 'skyblue', high = 'green') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = mean(weekendat7$avg), lty = 2) +
geom_hline(yintercept = quantile(weekendat7$avg, 0.75), lty = 2, color = 'red')+
geom_hline(yintercept = quantile(weekendat7$avg, 0.25), lty = 2, color = 'blue')+
geom_hline(yintercept = quantile(weekendat7$avg, 0.9), lty = 1, color = 'deeppink')
a <- weekdayat6[,c(1,3)]
b <- weekendat6[,c(1,3)]
c <- weekdayat7[,c(1,3)]
d <- weekendat7[,c(1,3)]
forties <- data.frame(a,b,c,d); forties # actually, doesn't need this but made a dataframe to see
mergedforties <- merge(x =a, y = b, by = "stationK", all = TRUE)
mergedforties <- merge(mergedforties, y = c, by = "stationK", all = TRUE)
mergedforties <- merge(mergedforties, y = d, by = "stationK", all = TRUE)
colnames(mergedforties) <- c('station', 'day6', 'end6', 'day7', 'end7')
mergedforties[,2:5] <- 41-mergedforties[,2:5]
mergedforties
nazero <- mergedforties
nazero[is.na(nazero)] <- 0; nazero
timeforties <- gather(nazero, timing, value, -station)
#library(directlabels)
ggplot(timeforties, aes(x=timing, y=value, group = station, color=station)) + geom_line() + geom_point()+
geom_dl(aes(label = station), method = list(dl.trans(x = x + .2), "last.points",cex = 0.8,hjust = 1)) +
geom_dl(aes(label = station), method = list(dl.trans(x = x - .2), "first.points",cex = 0.8, hjust = 1)) +
scale_colour_discrete(guide="none")
ggplot(timeforties, aes(x=timing, y=value, group = station, color=station)) + geom_line() + geom_point()+
geom_dl(aes(label = station), method = list(dl.trans(x = x + .2), "last.points",cex = 0.8,hjust = 1)) +
geom_dl(aes(label = station), method = list(dl.trans(x = x - .2), "first.points",cex = 0.8, hjust = 1)) +
scale_colour_discrete(guide="none")
library(directlabels) # for geom_dl
ggplot(timeforties, aes(x=timing, y=value, group = station, color=station)) + geom_line() + geom_point()+
geom_dl(aes(label = station), method = list(dl.trans(x = x + .2), "last.points",cex = 0.8,hjust = 1)) +
geom_dl(aes(label = station), method = list(dl.trans(x = x - .2), "first.points",cex = 0.8, hjust = 1)) +
scale_colour_discrete(guide="none")
source('C:/Users/asd/Desktop/데이터 사이언스/Monthly Data Analysis/월간 데이터 분석/March2018/analysis_subway2.R', encoding = 'euckr', echo=TRUE)
lane8
